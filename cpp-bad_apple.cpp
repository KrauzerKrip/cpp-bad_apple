/*

MIT License

Copyright (c) 2022 Andy Darson

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.



Thanks for ChatGPT by OpenAI. Base of the code was generated by translation from my previous Python version.
*/

#include "cpp-bad_apple.h"

#include <iostream>
#include <fstream>
#include <string>
#include <iostream>
#include <vector>
#include <thread>
#include <sstream>
#include <stdexcept>
#include <SFML/Audio.hpp>
#include <filesystem>
#ifdef _WIN32 
    #include <Windows.h>
#endif
#ifdef DEBUG
    #include <chrono>
#endif


const int MEMORY_FPS = 24;
const std::string MUSIC_PATH = "ABSOLUTE PATH TO MUSIC"; // <-- DON`T FORGET TO CHANGE IT.
const std::string MEMORY_PATH = "ABSOLUTE PATH TO MEMORY FILE"; // <-- DON`T FORGET TO CHANGE IT.
const int MUSIC_VOLUME = 25; // 100 is default but it is an earrape.
const int FRAMES_NUMBER = 5257;

std::vector<std::string>* readMemory() {

    std::cout << "Loading..." << std::endl;
    std::ifstream file(MEMORY_PATH);

    if (!file.good()) {
        throw std::runtime_error("Failed to handle the memory file. Check if the file path is correct or if another programm is not using file.");
    }

    std::string contents((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());
    std::vector<std::string>* frames = new std::vector<std::string>();
    std::string delimiter = "SPLIT";
    size_t pos = 0;
    int i = 0;

#ifdef DEBUG
    auto time = std::chrono::steady_clock::now();
#endif

    while ((pos = contents.find(delimiter)) != std::string::npos)
    {
        int percent = (int)((i / (float)FRAMES_NUMBER) * 100);
        std::cout << "Loading: " << percent << '%' << std::endl;
        frames->push_back(contents.substr(0, pos));
        contents.erase(0, pos + delimiter.length());
        i++;
    }

#ifdef DEBUG
    auto deltaTime = std::chrono::steady_clock::now() - time;
    std::cout << deltaTime.count() << std::endl;
    assert(0);
#endif 

    frames->push_back(contents);
    return frames;
}

void printFrames(const std::vector<std::string>* frames, int FPS) {

    sf::Music music;
    if (!music.openFromFile(MUSIC_PATH)) {
        throw std::runtime_error("SFML Music play fail.");
    }
    music.setVolume(MUSIC_VOLUME);
    music.play();

    long deltaTime = 0;

    for (const std::string& frame : *frames)
    {
        auto startTime = (long)std::time(nullptr) * 1000;
        std::cout << frame << std::endl;
        long sleepFor = (1000 / FPS) - deltaTime;
        std::this_thread::sleep_for(std::chrono::milliseconds(sleepFor));
        deltaTime = (long)std::time(nullptr) * 1000 - startTime;
    }
}

int main() {
    std::string input_str;
    std::cout << "Type 'play [FPS] [START TIME IN SECONDS] ' (e.g: 'play 24 10')." << std::endl;
    getline(std::cin, input_str);
    std::transform(input_str.begin(), input_str.end(), input_str.begin(), ::tolower);

    std::vector<std::string> tokens;
    std::string token;
    std::stringstream ss(input_str);
    std::string item;

    while (std::getline(ss, item, ' ')) {
        tokens.push_back(item);
    }
    if (tokens.size() < 3) {
        std::cerr << "Invalid input." << std::endl;
        return 1;
    }

    int FPS = std::stoi(tokens[1]);
    int start_time = std::stoi(tokens[2]);


    std::vector<std::string>* memory = nullptr;

    try {
        memory = readMemory();
    }
    catch (std::runtime_error& exception) {
        std::cerr << exception.what() << std::endl;
#ifdef _WIN32
        MessageBox(NULL, exception.what(), "Bad apple!", MB_ICONERROR | MB_OK);
#endif
        exit(1);
    }

    try {
        if (memory == nullptr) {
            throw std::runtime_error("Memory file wasn`t read successfully.");
        }

        printFrames(memory, FPS);
    }
    catch (std::runtime_error& exception) {
        std::cerr << exception.what() << std::endl;
#ifdef _WIN32
        MessageBox(NULL, exception.what(), "Bad apple!", MB_ICONERROR | MB_OK);
#endif
        exit(1);
    }

    delete memory;
}